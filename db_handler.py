import os
import json
from datetime import datetime, timedelta

LEARNING_DIR = "Learning"
CHATS_DIR = "Chats"
os.makedirs(LEARNING_DIR, exist_ok=True)
os.makedirs(CHATS_DIR, exist_ok=True)

CHAT_TIMEOUT_MINUTES = 5

def _get_file_path(shift_name):
    return os.path.join(LEARNING_DIR, f"{shift_name}.json")

def _get_chats_file():
    return os.path.join(CHATS_DIR, "active_chats.json")

def _load_active_chats():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞"""
    chats_file = _get_chats_file()
    if os.path.exists(chats_file):
        try:
            with open(chats_file, "r", encoding="utf-8") as f:
                return json.load(f)
        except json.JSONDecodeError:
            return {}
    return {}

def _save_active_chats(chats_data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
    chats_file = _get_chats_file()
    with open(chats_file, "w", encoding="utf-8") as f:
        json.dump(chats_data, f, ensure_ascii=False, indent=2)

def _is_chat_expired(last_activity_str):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏—Å—Ç–µ–∫ –ª–∏ —á–∞—Ç (–±–æ–ª–µ–µ 5 –º–∏–Ω—É—Ç –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏)"""
    try:
        last_activity = datetime.fromisoformat(last_activity_str)
        return datetime.now() - last_activity > timedelta(minutes=CHAT_TIMEOUT_MINUTES)
    except:
        return True

def _get_or_create_chat_id(username):
    """–ü–æ–ª—É—á–∞–µ—Ç ID –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π"""
    chats_data = _load_active_chats()
    now = datetime.now().isoformat()
    
    if username in chats_data:
        chat_info = chats_data[username]
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫ –ª–∏ —á–∞—Ç
        if not _is_chat_expired(chat_info["last_activity"]):
            # –ß–∞—Ç –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            chat_info["last_activity"] = now
            _save_active_chats(chats_data)
            return chat_info["chat_id"]
        else:
            # –ß–∞—Ç –∏—Å—Ç–µ–∫, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
            chat_info["chat_id"] += 1
    else:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        chats_data[username] = {"chat_id": 1}
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    chats_data[username]["last_activity"] = now
    _save_active_chats(chats_data)
    
    return chats_data[username]["chat_id"]

def get_chat_statistics():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç–∞–º"""
    chats_data = _load_active_chats()
    active_chats = 0
    closed_chats = 0
    
    for username, chat_info in chats_data.items():
        if _is_chat_expired(chat_info["last_activity"]):
            closed_chats += 1
        else:
            active_chats += 1
    
    return {
        "active_chats": active_chats,
        "closed_chats": closed_chats,
        "total_users": len(chats_data)
    }

def add_incoming(message, shift, username=None):
    path = _get_file_path(shift)
    chat_id = None
    if username:
        chat_id = _get_or_create_chat_id(username)
    _add_message(path, message, "incoming", username, chat_id)

def add_outgoing(message, shift, username=None):
    path = _get_file_path(shift)
    chat_id = None
    if username:
        # –î–ª—è –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π chat_id
        chats_data = _load_active_chats()
        if username in chats_data and not _is_chat_expired(chats_data[username]["last_activity"]):
            chat_id = chats_data[username]["chat_id"]
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            chats_data[username]["last_activity"] = datetime.now().isoformat()
            _save_active_chats(chats_data)
    _add_message(path, message, "outgoing", username, chat_id)

def _add_message(path, message, key, username=None, chat_id=None):
    timestamp = datetime.now().isoformat()
    data = {"incoming": [], "outgoing": []}

    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except json.JSONDecodeError:
                data = {"incoming": [], "outgoing": []}

    message_entry = {
        "message": message, 
        "timestamp": timestamp,
        "username": username,
        "chat_id": chat_id
    }
    
    data[key].append(message_entry)

    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_shift_messages(shift_name):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–º–µ–Ω—ã –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
    path = _get_file_path(shift_name)
    if not os.path.exists(path):
        return [], []
    with open(path, "r", encoding="utf-8") as f:
        data = json.load(f)
    return data.get("incoming", []), data.get("outgoing", [])

def get_detailed_chat_statistics():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Ç–∞–º —Å –∏–º–µ–Ω–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    chats_data = _load_active_chats()
    active_chats = []
    closed_chats = []
    
    print(f"DEBUG: –ó–∞–≥—Ä—É–∂–µ–Ω–æ —á–∞—Ç–æ–≤: {len(chats_data)}")
    
    for username, chat_info in chats_data.items():
        print(f"DEBUG: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username}, –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {chat_info['last_activity']}")
        
        chat_entry = {
            "username": username,
            "chat_id": chat_info["chat_id"],
            "last_activity": chat_info["last_activity"]
        }
        
        if _is_chat_expired(chat_info["last_activity"]):
            closed_chats.append(chat_entry)
            print(f"DEBUG: {username} - –∑–∞–∫—Ä—ã—Ç—ã–π —á–∞—Ç")
        else:
            active_chats.append(chat_entry)
            print(f"DEBUG: {username} - –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç")
    
    result = {
        "active_chats": len(active_chats),
        "closed_chats": len(closed_chats),
        "total_users": len(chats_data),
        "active_chat_list": active_chats,
        "closed_chat_list": closed_chats
    }
    
    print(f"DEBUG: –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
    return result
GREETINGS = [
    "–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—èüòä", "–ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!", "–ì–∞—Ä–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞!", "–ì–∞—Ä–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞üòä",
    "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñ!", "–î–æ–±—Ä–æ—ó –Ω–æ—á—ñüòä", "–ë—É–¥—å –ª–∞—Å–∫–∞, –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—èüòä", "–ë—É–¥—å –ª–∞—Å–∫–∞, –ì–∞—Ä–Ω–æ–≥–æ –¥–Ω—è!",
    "–ë—É–¥—å –ª–∞—Å–∫–∞, –ì–∞—Ä–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞!", "–ë—É–¥—å –ª–∞—Å–∫–∞, –ì–∞—Ä–Ω–æ–≥–æ –≤–µ—á–æ—Ä–∞üòä",
    "–ë—É–¥—å –ª–∞—Å–∫–∞, –î–æ–±—Ä–æ—ó –Ω–æ—á—ñ!", "–ë—É–¥—å –ª–∞—Å–∫–∞, –î–æ–±—Ä–æ—ó –Ω–æ—á—ñüòä"
]

def force_close_chat(username):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    chats_data = _load_active_chats()
    if username in chats_data:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ —á–∞—Å –Ω–∞–∑–∞–¥, —á—Ç–æ–±—ã —á–∞—Ç —Å—á–∏—Ç–∞–ª—Å—è –∑–∞–∫—Ä—ã—Ç—ã–º
        old_time = datetime.now() - timedelta(hours=1)
        chats_data[username]["last_activity"] = old_time.isoformat()
        _save_active_chats(chats_data)
        print(f"–ß–∞—Ç —Å {username} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã—Ç")

def is_greeting_message(message):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—â–∞–ª—å–Ω—ã–º"""
    return message.strip() in GREETINGS